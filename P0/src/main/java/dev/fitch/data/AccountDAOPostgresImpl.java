package dev.fitch.data;

import dev.fitch.entities.Account;
import dev.fitch.entities.Transaction;
import dev.fitch.utilities.*;

import java.sql.*;

public class AccountDAOPostgresImpl implements AccountDAO{

    private AccountDAO accountDAO;

    @Override
    public Account createAccount(Account account) {
        try {
            Connection conn = ConnectionUtil.createConnection();
            String sql = "insert into account values (default,?,?,?,?)";
            PreparedStatement ps = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            ps.setString(1, account.getAccountType()); //first ? above = accountType
            ps.setString(2, account.getOwnerOne()); //second ? above = ownerOne
            ps.setString(3, account.getOwnerTwo()); //third ownerTwo
            ps.setDouble(4, account.getBalance()); //forth ? = balance

            ps.execute(); //send sql statement to Postgres DB

            //Get accountNumber, which is autogenerated from the DB
            ResultSet rs = ps.getGeneratedKeys(); //ResultSet is a virtual table, so we need to get the first record returned
            rs.next(); //move to the first record
            int generatedId = rs.getInt("account_number"); //save DB generated acct num to "generatedId"
            account.setAccountNumber(generatedId); //copy db account_number to account.accountNumber
            return account;

        } catch (SQLException e) {
            e.printStackTrace();
            Logger.log(e.getMessage(), LogLevel.ERROR);
            return null;
        }
    }

    @Override
    public Account getAccountDetails(int accountNumber) {

        try {
            Connection conn = ConnectionUtil.createConnection();
            String sql = "select * from account where account_number = ?";
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setInt(1, accountNumber);

            ResultSet rs = ps.executeQuery();
            rs.next(); // move to first record
            Account account = new Account();
            account.setAccountNumber(rs.getInt("account_number"));
            account.setAccountType(rs.getString("account_type"));
            account.setOwnerOne(rs.getString("owner_1_username"));
            account.setOwnerTwo(rs.getString("owner_2_username"));
            account.setBalance(rs.getDouble("balance"));

            return account;

        } catch (SQLException e) {
            e.printStackTrace();
            Logger.log(e.getMessage(), LogLevel.ERROR);
            return null;
        }
    }

    @Override
    public Account updateAccount(Account account) {

        try {
            Connection conn = ConnectionUtil.createConnection();
            String sql = "update account set account_number = ?, account_type = ?, owner_1_username = ?, owner_2_username = ?, balance = ? where account_number = ?";
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setInt(1, account.getAccountNumber() );
            ps.setString(2, account.getAccountType() );
            ps.setString(3, account.getOwnerOne());
            ps.setString(4, account.getOwnerTwo());
            ps.setDouble(5, account.getBalance());
            ps.setInt(6, account.getAccountNumber() );
            ps.executeUpdate();
            return account;

        } catch (SQLException e) {
            e.printStackTrace();
            Logger.log(e.getMessage(), LogLevel.ERROR);
            return null;
        }
    }

    @Override
    public boolean closeAccount(int accountNumber) {

        try {
            Connection conn = ConnectionUtil.createConnection();
            String sql = "delete from account where account_number = ?";
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setInt(1, accountNumber);
            ps.execute();
            return true;
        } catch (SQLException e) {
            e.printStackTrace();
            Logger.log(e.getMessage(), LogLevel.ERROR);
            return false;
        }
    }

    @Override
    public List<Account> findAccounts(String username) {
        try {
            Connection conn = ConnectionUtil.createConnection();
            String sql = "select * from account where owner_1_username = '" + username + "' OR owner_2_username = '" + username + "';";
            PreparedStatement ps = conn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            List<Account> accounts = new ArrayList();

            while (rs.next()) {
                Account account = new Account();

                account.setAccountNumber(rs.getInt("account_number"));
                account.setAccountType(rs.getString("account_type"));
                account.setOwnerOne(rs.getString("owner_1_username"));
                account.setOwnerTwo(rs.getString("owner_2_username"));
                account.setBalance(rs.getDouble("balance"));

                accounts.add(account);
            }

            return accounts;

        } catch (SQLException e) {
            e.printStackTrace();
            Logger.log(e.getMessage(), LogLevel.ERROR);
            return null;
        }
    }

    @Override
    public Account verifyAccount(int accountNumber) {
        try {
            Connection conn = ConnectionUtil.createConnection();
            String sql = "select count(*) from account where account_number = ?";
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setInt(1, accountNumber);

            ResultSet rs = ps.executeQuery();
            rs.next(); // move to first record

            int count = rs.getInt("count");

            if (count == 1){
                conn = ConnectionUtil.createConnection();
                sql = "select owner_1_username, owner_2_username from account where account_number = ?";
                ps = conn.prepareStatement(sql);
                ps.setInt(1, accountNumber);

                rs = ps.executeQuery();
                rs.next();

                Account account = new Account();
                account.setOwnerOne(rs.getString("owner_1_username"));
                account.setOwnerTwo(rs.getString("owner_2_username"));
                return account;
            }else {
                return null;
            }
        } catch (SQLException e) {
            e.printStackTrace();
            Logger.log(e.getMessage(), LogLevel.ERROR);
            return null;
        }
    }
}
